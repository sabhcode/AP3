PS C:\Users\sofia\my_first_app> php bin/console doctrine:database:create
Created database `blog` for connection named default
PS C:\Users\sofia\my_first_app> php bin/console make:entity

 Class name of the entity to create or update (e.g. BraveGnome):
 > Article

 created: src/Entity/Article.php
 created: src/Repository/ArticleRepository.php
 
 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > titre

 Field type (enter ? to see all types) [string]:
 >       

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 > no

 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > contenu

 Field type (enter ? to see all types) [string]:
 > text

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > date_creation

 Field type (enter ? to see all types) [string]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 > no
 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 >


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\sofia\my_first_app> php bin/console make:entity

 Class name of the entity to create or update (e.g. BraveGnome):
 > Categorie

 created: src/Entity/Categorie.php
 created: src/Repository/CategorieRepository.php
 
 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > nom

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 > no
 updated: src/Entity/Categorie.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 >


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\sofia\my_first_app> php bin/console make:entity

 Class name of the entity to create or update (e.g. VictoriousKangaroo):
 > Article

 Your entity already exists! So let's add some new fields!

 New property name (press <return> to stop adding fields):
 > la_categorie 

 Field type (enter ? to see all types) [string]:
 > ManyToOne

 What class should this entity be related to?:
 > Categorie

 Is the Article.la_categorie property allowed to be null (nullable)? (yes/no) [yes]:
 > no

 Do you want to add a new property to Categorie so that you can access/update Article objects from it - e.g. $categorie->getArticles()? (yes/no) [yes]:
 > yes

 A new property will also be added to the Categorie class so that you can access the related Article objects from it.

 New field name inside Categorie [articles]:
 > les_articles

 Do you want to activate orphanRemoval on your relationship?
 A Article is "orphaned" when it is removed from its related Categorie.
 e.g. $categorie->removeArticle($article)

 NOTE: If a Article may *change* from one Categorie to another, answer "no".

 Do you want to automatically delete orphaned App\Entity\Article objects (orphanRemoval)? (yes/no) [no]:  
 >

 updated: src/Entity/Article.php
 updated: src/Entity/Categorie.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 >



  Success!


 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\sofia\my_first_app> php bin/console make:migration
 created: migrations/Version20230914122953.php

 
  Success! 
 

 Review the new migration then run it with php bin/console doctrine:migrations:migrate
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html    

PS C:\Users\sofia\my_first_app> php bin/console doctrine:migrations:migrate

 WARNING! You are about to execute a migration in database "blog" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) [yes]:
 > yes

[notice] Migrating up to DoctrineMigrations\Version20230914122953
[notice] finished in 3148.4ms, used 22M memory, 1 migrations executed, 4 sql queries

 [OK] Successfully migrated to version : DoctrineMigrations\Version20230914122953       
                                                                                   

PS C:\Users\sofia\GillardSymfonyPlayground> php bin/console make:user

 The name of the security user class (e.g. User) [User]:
 > Utilisateur

 Do you want to store user data in the database (via Doctrine)? (yes/no) [yes]:
 > 

 Enter a property name that will be the unique "display" name for the user (e.g. email, username, uuid) [email]:
 > 
 Will this app need to hash/check user passwords? Choose No if passwords are not needed or will be checked/hashed by some other system (e.g. a single sign-on server).

 Does this app need to hash/check user passwords? (yes/no) [yes]:
 >

 created: src/Entity/Utilisateur.php
 created: src/Repository/UtilisateurRepository.php
 updated: src/Entity/Utilisateur.php
 updated: config/packages/security.yaml

 
  Success! 
 

 Next Steps:
   - Review your new App\Entity\Utilisateur class.
   - Use make:entity to add more fields to your Utilisateur entity and then run make:migration.
   - Create a way to authenticate! See https://symfony.com/doc/current/security.html      
PS C:\Users\sofia\GillardSymfonyPlayground> php bin/console make:entity

 Class name of the entity to create or update (e.g. GentlePuppy):
 > Utilisateur

 Your entity already exists! So let's add some new fields ! 


Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 > no

 updated: src/Entity/Utilisateur.php

 Add another property? Enter the property name (or press <return> to stop adding fields): 
 > prenom

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Utilisateur.php

 Add another property? Enter the property name (or press <return> to stop adding fields): 
 > avatar

 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/Utilisateur.php

 Add another property? Enter the property name (or press <return> to stop adding fields): 
 >


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\sofia\GillardSymfonyPlayground> php bin/console make:migration                

 
  Success! 
 

 Review the new migration then run it with php bin/console doctrine:migrations:migrate    
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html
PS C:\Users\sofia\GillardSymfonyPlayground> php bin/console doctrine:migrations:migrate   

 WARNING! You are about to execute a migration in database "blog" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) [yes]:
 >

[notice] Migrating up to DoctrineMigrations\Version20230915074027
[notice] finished in 662.3ms, used 20M memory, 1 migrations executed, 1 sql queries       
                                                                                          
 [OK] Successfully migrated to version : DoctrineMigrations\Version20230915074027         
                                                                                          


PS C:\Users\sofia\GillardSymfonyPlayground> php bin/console make:registration-form        
 Creating a registration form for App\Entity\Utilisateur

 Do you want to add a #[UniqueEntity] validation attribute to your Utilisateur class to make sure duplicate accounts aren't created? (yes/no) [yes]:
 >

 Do you want to send an email to verify the user's email address after registration? (yes/no) [yes]:
 > no

 Do you want to automatically authenticate the user after registration? (yes/no) [yes]:   
 > no

 What route should the user be redirected to after registration?:
  [0 ] _preview_error
  [1 ] _wdt
  [2 ] _profiler_home
  [3 ] _profiler_search
  [4 ] _profiler_search_bar
  [5 ] _profiler_phpinfo
  [6 ] _profiler_xdebug
  [7 ] _profiler_search_results
  [8 ] _profiler_open_file
  [9 ] _profiler
  [10] _profiler_router
  [11] _profiler_exception
  [12] _profiler_exception_css
  [13] app_categories
  [14] app_home
 > 14

 updated: src/Entity/Utilisateur.php
 created: src/Form/RegistrationFormType.php
 created: src/Controller/RegistrationController.php
 created: templates/registration/register.html.twig

 
  Success! 
 

 Next:
 Make any changes you need to the form, controller & template.

 Then open your browser, go to "/register" and enjoy your new form!


PS C:\Users\sofia\GillardSymfonyPlayground> php bin/console make:auth                     

 What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > Connexion

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:   
 > Connexion

 Do you want to generate a '/logout' URL? (yes/no) [yes]:
 >
PS C:\Users\sofia\GillardSymfonyPlayground> php bin/console make:auth

 What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1   

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > Utilisateur

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:   
 >

 Do you want to generate a '/logout' URL? (yes/no) [yes]:
 >

 Do you want to support remember me? (yes/no) [yes]:
 >

 How should remember me be activated? [Activate when the user checks a box]:
  [0] Activate when the user checks a box
  [1] Always activate remember me
 > 0

 created: src/Security/UtilisateurAuthenticator.php
 updated: config/packages/security.yaml
 created: src/Controller/SecurityController.php
 created: templates/security/login.html.twig

 
  Success! 
 

 Next:
 - Customize your new authenticator.
 - Finish the redirect "TODO" in the App\Security\UtilisateurAuthenticator::onAuthenticationSuccess() method.
 - Review & adapt the login template: templates/security/login.html.twig.
